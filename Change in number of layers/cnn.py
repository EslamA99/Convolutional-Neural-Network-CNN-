# -*- coding: utf-8 -*-
"""CNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Fvq8qePgXkeARkuMK0W0zYkuQ6STaXs2
"""

from tensorflow import keras
from keras.models import Sequential
from keras.layers import Conv2D
from keras.layers import MaxPool2D
from keras.layers import Flatten
from keras.layers import Dense
from keras.utils import to_categorical
from sklearn.model_selection import KFold, StratifiedKFold
import numpy as np

(X_train, y_train), (X_test, y_test) = keras.datasets.mnist.load_data()
X_train = X_train.reshape(60000, 28, 28, 1)
X_test = X_test.reshape(10000, 28, 28, 1)
X_train = X_train.astype('float32')
X_test = X_test.astype('float32')
X_train /= 255
X_test /= 255
y_original = y_train
y_train = to_categorical(y_train)
y_test = to_categorical(y_test)
kf = StratifiedKFold(n_splits = 4, shuffle = True)
numOfArc = 4
model = [0] *numOfArc
for j in range(numOfArc):
    model[j] = Sequential()
    model[j].add(Conv2D(16,kernel_size=5,padding='same',activation='relu',input_shape=(28,28,1)))
    model[j].add(MaxPool2D(pool_size=(2,2)))
    if j>0:
      model[j].add(Conv2D(32,kernel_size=5,padding='same',activation='relu'))
      model[j].add(MaxPool2D(pool_size=(2,2)))
    if j>1:
      model[j].add(Conv2D(48,kernel_size=5,padding='same',activation='relu'))
      model[j].add(MaxPool2D(pool_size=(2,2)))
    if j>2:
      model[j].add(Conv2D(64,kernel_size=5,padding='same',activation='relu'))
      model[j].add(MaxPool2D(pool_size=(2,2)))

    model[j].add(Flatten())
    model[j].add(Dense(10, activation='softmax'))
    model[j].compile(optimizer="adam", loss="categorical_crossentropy", metrics=["accuracy"])
accuracies=[]
for j in range(numOfArc):
  counter=0
  for t, v in kf.split(X_train, y_original):
    h=model[j].fit(X_train[t], y_train[t], validation_data=(X_train[v], y_train[v]), epochs=4)
  arr=model[j].evaluate(X_test, y_test)
  print('\n\nprediction loss of model',j+1,' in X_text and Y_test = ',arr[0])
  print('prediction accuracy of model',j+1,' in X_text and Y_test = ',arr[1],'\n\n')
  acc=h.history['accuracy'][-1]
  accuracies.append(acc)

print('Accuracies of models = ',accuracies)
print("Max Accuracy= ",max(accuracies))
index=accuracies.index(max(accuracies))
arr=model[index].evaluate(X_test, y_test)
print('prediction loss of the best model in X_text and Y_test = ',arr[0])
print('prediction accuracy of the best model in X_text and Y_test = ',arr[1])